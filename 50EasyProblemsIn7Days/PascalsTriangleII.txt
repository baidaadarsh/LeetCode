[119. Pascal's Triangle II]

Question:
Given an integer rowIndex, return the rowIndexth row of the Pascal's triangle.

Notice that the row index starts from 0.


In Pascal's triangle, each number is the sum of the two numbers directly above it.

Follow up:

Could you optimize your algorithm to use only O(k) extra space?

 

Example 1:

Input: rowIndex = 3
Output: [1,3,3,1]
Example 2:

Input: rowIndex = 0
Output: [1]
Example 3:

Input: rowIndex = 1
Output: [1,1]
 

Constraints:

0 <= rowIndex <= 40

My Solution:
class Solution {
    public List<Integer> getRow(int rowIndex) {
        List<Integer> temp, temp2, res = new ArrayList<Integer>();
        
        for(int i = 0; i <= rowIndex; i++) {
            if(i == 0) {
                temp = new ArrayList<Integer>();
                temp.add(1);
                res = new ArrayList<>(temp);
            }
            else {
                temp = new ArrayList<>(res);
                temp2 = new ArrayList<Integer>();
                temp2.add(1);
                for(int j = 1; j < temp.size(); j++) {
                    temp2.add(temp.get(j) + temp.get(j - 1));
                }
                temp2.add(1);
                res = new ArrayList<>(temp2);
            }
        }
        
        return res;
        
    }
}

Leetcode Solution:
class Solution {
    public List<Integer> getRow(int rowIndex) {
    List<Integer> ret = new ArrayList<>(Collections.nCopies(rowIndex+1, 1));
    for (int i = 1; i < rowIndex; i++) {
        for (int j = rowIndex-i; j < rowIndex; j++) // from left to right
            ret.set(j, ret.get(j) + ret.get(j+1));
    }
    return ret;
}
}

Approach:
1. Intuition - only saving the previous row to compute the next one.

Learnings:
1. Collections.nCopies can be used in cases when we need a list with same object.
