[20. Valid Parentheses]

Question:
Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Note that an empty string is also considered valid.

Example 1:

Input: "()"
Output: true
Example 2:

Input: "()[]{}"
Output: true
Example 3:

Input: "(]"
Output: false
Example 4:

Input: "([)]"
Output: false
Example 5:

Input: "{[]}"
Output: true

My Solution:
class Solution {
    public boolean isValid(String s) {
        int i;
        char c;
        Stack<Character> stack = new Stack<Character>();
        for(i = 0; i < s.length(); i++){
            c = s.charAt(i);
            if(isOpening(c))
                stack.push(c);
            else
                if(stack.isEmpty() || !isValidBrace(c, stack.pop()))
                    return false;
        }
        if(stack.isEmpty())
            return true;
        else
            return false;
    }
    
    public boolean isValidBrace(char c, char poppedChar) {
        switch(c) {
                case ')':
                    return poppedChar == '(';
                case '}':
                    return poppedChar == '{';
                case ']':
                    return poppedChar == '[';
            default:
                return false;
        }
    }

    public boolean isOpening(char c){
        return (c == '(' || c == '{' || c == '[');
    }
}
Leetcode Solution:
class Solution {

  // Hash table that takes care of the mappings.
  private HashMap<Character, Character> mappings;

  // Initialize hash map with mappings. This simply makes the code easier to read.
  public Solution() {
    this.mappings = new HashMap<Character, Character>();
    this.mappings.put(')', '(');
    this.mappings.put('}', '{');
    this.mappings.put(']', '[');
  }

  public boolean isValid(String s) {

    // Initialize a stack to be used in the algorithm.
    Stack<Character> stack = new Stack<Character>();

    for (int i = 0; i < s.length(); i++) {
      char c = s.charAt(i);

      // If the current character is a closing bracket.
      if (this.mappings.containsKey(c)) {

        // Get the top element of the stack. If the stack is empty, set a dummy value of '#'
        char topElement = stack.empty() ? '#' : stack.pop();

        // If the mapping for this bracket doesn't match the stack's top element, return false.
        if (topElement != this.mappings.get(c)) {
          return false;
        }
      } else {
        // If it was an opening bracket, push to the stack.
        stack.push(c);
      }
    }

    // If the stack still contains elements, then it is an invalid expression.
    return stack.isEmpty();
  }
}

Approach:
1. Using Stacks

Learnings:
1. Usage of Array is better than Stack for time complexity concerns.
2. HashMap can be used to store bracket pairs.
