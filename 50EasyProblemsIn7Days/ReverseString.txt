Question:

Write a function that reverses a string. The input string is given as an array of characters char[].

Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.

You may assume all the characters consist of printable ascii characters.

 

Example 1:

Input: ["h","e","l","l","o"]
Output: ["o","l","l","e","h"]
Example 2:

Input: ["H","a","n","n","a","h"]
Output: ["h","a","n","n","a","H"]

My Solution:
class Solution {
    public void reverseString(char[] s) {
        int i = 0, len = s.length - 1;
        
        while(i < (len+1)/2) {
            swap(s, i, len);
            i++;
        }
    }
    
    public void swap(char[] s, int i, int len) {
        char temp;
        
        temp = s[i];
        s[i] = s[len - i];
        s[len - i] = temp;
    }
}

Leetcode solution:
class Solution {
    public void reverseString(char[] s) {
        int left = 0, right = s.length - 1;
        while (left < right) {
            char tmp = s[left];
            s[left++] = s[right];
            s[right--] = tmp;
        }
    }
}

Approach:
1. StringBuilder.
2. For loop with pointer calculation using len.
3. Two pointer approach with while loop.

Learnings:
1. Does in-place mean constant space complexity? 
	No, an in-place algorithm is an algorithm which transforms input using no auxiliary data structure.
2. Two pointers approach.
