[680. Valid Palindrome II]

Question:
Given a non-empty string s, you may delete at most one character. Judge whether you can make it a palindrome.

Example 1:
Input: "aba"
Output: True
Example 2:
Input: "abca"
Output: True
Explanation: You could delete the character 'c'.
Note:
The string will only contain lowercase characters a-z. The maximum length of the string is 50000.

My Solution:
class Solution {
    public boolean validPalindrome(String s) {
        int start = -1, end = s.length();
        while(++start < --end) {
            if(s.charAt(start)!=s.charAt(end)) {
                String a = s.substring(0, start)+s.substring(start+1);
                String b = s.substring(0, end)+s.substring(end+1);
                return (isPalindrome(a, start) || isPalindrome(b, start));
            }
        }
        return true;
    }
    
    public boolean isPalindrome(String s, int num) {
        int start = num - 1, end = s.length() - num;
        while(++start < --end) {
            if(s.charAt(start)!=s.charAt(end)) {
                return false;
            }
        }
        return true;
        
    }
}

Leetcode Solution:
class Solution {
    public boolean isPalindromeRange(String s, int i, int j) {
        for (int k = i; k <= i + (j - i) / 2; k++) {
            if (s.charAt(k) != s.charAt(j - k + i)) return false;
        }
        return true;
    }
    public boolean validPalindrome(String s) {
        for (int i = 0; i < s.length() / 2; i++) {
            if (s.charAt(i) != s.charAt(s.length() - 1 - i)) {
                int j = s.length() - 1 - i;
                return (isPalindromeRange(s, i+1, j) ||
                        isPalindromeRange(s, i, j-1));
            }
        }
        return true;
    }
}

Approach:
1. Brute Force - Remove each character and check.
2. Greedy
