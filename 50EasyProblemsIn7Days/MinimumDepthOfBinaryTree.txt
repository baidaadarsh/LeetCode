[111. Minimum Depth of Binary Tree]

Question:
Given a binary tree, find its minimum depth.

The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.

Note: A leaf is a node with no children.

Example:

Given binary tree [3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7
return its minimum depth = 2.

My Solution:
class Solution {
    public int minDepth(TreeNode root) {
        if(root == null)
            return 0;
        else {
            int minLeft = minDepth(root.left);
            int minRight = minDepth(root.right);
            return ((minLeft > 0 && minRight > 0)? Math.min(minLeft, minRight): Math.max(minLeft, minRight)) + 1;
        }
    }
}

Leetcode Solution:
class Solution {
    int min = Integer.MAX_VALUE;

    public int minDepth(TreeNode root) {
        if(root == null) return 0;
        if(root.left ==  null && root.right == null) return 1;

        if(root.left != null) {
            traversal(root.left, 1);
        }
        if(root.right != null) {
            traversal(root.right, 1);
        }
        
        return min+1;
    }

    private void traversal(TreeNode node, int level) {
        if(node.left == null && node.right == null) {
            min = Math.min(min, level);
            return;
        }

        if(node.left != null) {
            traversal(node.left, level+1);
        }
        if(node.right != null) {
            traversal(node.right, level+1);
        }
    }
}

Approach:
1. Recursion + Intuition
