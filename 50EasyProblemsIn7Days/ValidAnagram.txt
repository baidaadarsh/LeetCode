[242. Valid Anagram]

Question :

Given two strings s and t , write a function to determine if t is an anagram of s.

Example 1:

Input: s = "anagram", t = "nagaram"
Output: true
Example 2:

Input: s = "rat", t = "car"
Output: false
Note:
You may assume the string contains only lowercase alphabets.

Follow up:
What if the inputs contain unicode characters? How would you adapt your solution to such case?

My Solution:
class Solution {
    public boolean isAnagram(String s, String t) {
        int i;
        char c;
        HashMap<Character, Integer> mapS = new HashMap<Character, Integer>();
        HashMap<Character, Integer> mapT = new HashMap<Character, Integer>();
        
        for(i = 0; i < s.length(); i++) {
            c = s.charAt(i);
            mapS.put(c, mapS.getOrDefault(c, 0) + 1);
        }
        
        for(i = 0; i < t.length(); i++) {
            c = t.charAt(i);
            mapT.put(c, mapT.getOrDefault(c, 0) + 1);
        }
        
        return mapS.equals(mapT);
    }
}

Leetcode Solution:
class Solution {
    public boolean isAnagram(String s, String t) {
        char[] chars = new char[26];
        for(char c : s.toCharArray()) {
            ++chars[c - 'a'];
        }
        for(char c : t.toCharArray()) {
            --chars[c - 'a'];
        }
        for(int i = 0; i < 26; ++i) {
            if(chars[i] != 0) {
                return false;
            }
        }
        return true;
    }
}


Approach:
1. Sorting. O(n log n)
2. Hash Table(with integer counter). O(n)

Learnings:
1. Instead of using HashMap always use an integer counter, its much more efficient[Drastic difference].
2. Hash table can be used for the follow up involving uni - code characters(1.1 million combinations).
3. Its better to convert into a character array by using toCharArray, instead of using String and charAt everytime.
