[108. Convert Sorted Array to Binary Search Tree]

Question:
Given an array where elements are sorted in ascending order, convert it to a height balanced BST.

For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.

Example:

Given the sorted array: [-10,-3,0,5,9],

One possible answer is: [0,-3,9,-10,null,5], which represents the following height balanced BST:

      0
     / \
   -3   9
   /   /
 -10  5

My Solution:
class Solution {
    public TreeNode sortedArrayToBST(int[] nums) {
        return helper(nums, 0, nums.length - 1);
    }
    
    public TreeNode helper(int[] nums, int low, int high) {
        if(low <= high) {
            int mid = ((high - low)/ 2) + low;
            TreeNode left = helper(nums, low, mid - 1);
            TreeNode right = helper(nums, mid + 1, high);
            return new TreeNode(nums[mid], left, right);
        }
        return null;
    }
}
 
Leetcode Solution:
class Solution {
    public TreeNode sortedArrayToBST(int[] nums) {
        if (nums == null || nums.length == 0) return null;
        
        return buildTree(nums, 0, nums.length - 1);        
    }
    
    public TreeNode buildTree(int[] nums, int start, int end) {
        if (start > end) return null;
        int mid = (start + end) / 2;
        TreeNode node = new TreeNode(nums[(start + end)/2]);
        if (mid > start) {
            node.left = buildTree(nums, start, mid - 1);
        }
        if (mid < end) {
            node.right = buildTree(nums, mid + 1, end);
        }
        return node;
        
    }
}

Approach:
1. Binary Search + Recursion
