[345. Reverse Vowels of a String]

Question:

Write a function that takes a string as input and reverse only the vowels of a string.

Example 1:

Input: "hello"
Output: "holle"
Example 2:

Input: "leetcode"
Output: "leotcede"
Note:
The vowels does not include the letter "y".

My Solution:
class Solution {
    public String reverseVowels(String s) {
        int i = 0, j = s.length() - 1;
        char[] charArray;
        
        charArray = s.toCharArray();
       do {
            while(i < j && !isVowel(charArray[i]))
                i++;
            while(i < j && !isVowel(charArray[j]))
                j--;
            if(i < j) {
                if(charArray[i] != charArray[j])
                    swap(charArray, i, j);
                i++;
                j--;
            }
        }while(i < j);
        
        return new String(charArray);
    }
    
    public boolean isVowel(char c) {
        return (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')? true: false;
    }
    
    public void swap(char[] charArray, int i, int j) {
        char temp;
        
        temp = charArray[i];
        charArray[i] = charArray[j];
        charArray[j] = temp;
    }
}

Leetcode solution:
class Solution {
    public String reverseVowels(String s) {
        int len =s.length();
        boolean []map = new boolean[256];
        map['a'] = true;
        map['e' ] =true;
        map['i'] = true;
        map['u'] =true;
        map['o' ] =true;
        
        map['A'] = true;
        map['E' ] =true;
        map['I'] = true;
        map['U'] =true;
        map['O' ] =true;
        
        
        char []arrayChars  = s.toCharArray();
        int l =0;
        int r = s.length()-1;
        while(l<r) {
            while(l<r&&map[arrayChars[l]]==false) ++l;
            while(l<r&&map[arrayChars[r]]==false) --r;
            if(l<r) {
                char temp = arrayChars[l];
                arrayChars[l]= arrayChars[r];
                arrayChars[r] = temp;
            }
            ++l;
            --r;
        }
        
        
        return new String(arrayChars);
        
    }
}

Approach:
1. Two pointer
2. Two pointer plus boolean array of 256 size [Better]
